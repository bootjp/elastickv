// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: distribution.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributionClient is the client API for Distribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionClient interface {
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	GetTimestamp(ctx context.Context, in *GetTimestampRequest, opts ...grpc.CallOption) (*GetTimestampResponse, error)
}

type distributionClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionClient(cc grpc.ClientConnInterface) DistributionClient {
	return &distributionClient{cc}
}

func (c *distributionClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	out := new(GetRouteResponse)
	err := c.cc.Invoke(ctx, "/Distribution/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) GetTimestamp(ctx context.Context, in *GetTimestampRequest, opts ...grpc.CallOption) (*GetTimestampResponse, error) {
	out := new(GetTimestampResponse)
	err := c.cc.Invoke(ctx, "/Distribution/GetTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionServer is the server API for Distribution service.
// All implementations must embed UnimplementedDistributionServer
// for forward compatibility
type DistributionServer interface {
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	GetTimestamp(context.Context, *GetTimestampRequest) (*GetTimestampResponse, error)
	mustEmbedUnimplementedDistributionServer()
}

// UnimplementedDistributionServer must be embedded to have forward compatible implementations.
type UnimplementedDistributionServer struct {
}

func (UnimplementedDistributionServer) GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedDistributionServer) GetTimestamp(context.Context, *GetTimestampRequest) (*GetTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimestamp not implemented")
}
func (UnimplementedDistributionServer) mustEmbedUnimplementedDistributionServer() {}

// UnsafeDistributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionServer will
// result in compilation errors.
type UnsafeDistributionServer interface {
	mustEmbedUnimplementedDistributionServer()
}

func RegisterDistributionServer(s grpc.ServiceRegistrar, srv DistributionServer) {
	s.RegisterService(&Distribution_ServiceDesc, srv)
}

func _Distribution_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Distribution/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_GetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).GetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Distribution/GetTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).GetTimestamp(ctx, req.(*GetTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Distribution_ServiceDesc is the grpc.ServiceDesc for Distribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Distribution",
	HandlerType: (*DistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoute",
			Handler:    _Distribution_GetRoute_Handler,
		},
		{
			MethodName: "GetTimestamp",
			Handler:    _Distribution_GetTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distribution.proto",
}
