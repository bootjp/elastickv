// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: distribution.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DistributionAdmin_SplitRange_FullMethodName = "/DistributionAdmin/SplitRange"
	DistributionAdmin_GetStats_FullMethodName   = "/DistributionAdmin/GetStats"
)

// DistributionAdminClient is the client API for DistributionAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionAdminClient interface {
	SplitRange(ctx context.Context, in *SplitRangeRequest, opts ...grpc.CallOption) (*SplitRangeResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type distributionAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionAdminClient(cc grpc.ClientConnInterface) DistributionAdminClient {
	return &distributionAdminClient{cc}
}

func (c *distributionAdminClient) SplitRange(ctx context.Context, in *SplitRangeRequest, opts ...grpc.CallOption) (*SplitRangeResponse, error) {
	out := new(SplitRangeResponse)
	err := c.cc.Invoke(ctx, DistributionAdmin_SplitRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionAdminClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, DistributionAdmin_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionAdminServer is the server API for DistributionAdmin service.
// All implementations must embed UnimplementedDistributionAdminServer
// for forward compatibility
type DistributionAdminServer interface {
	SplitRange(context.Context, *SplitRangeRequest) (*SplitRangeResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedDistributionAdminServer()
}

// UnimplementedDistributionAdminServer must be embedded to have forward compatible implementations.
type UnimplementedDistributionAdminServer struct {
}

func (UnimplementedDistributionAdminServer) SplitRange(context.Context, *SplitRangeRequest) (*SplitRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitRange not implemented")
}
func (UnimplementedDistributionAdminServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedDistributionAdminServer) mustEmbedUnimplementedDistributionAdminServer() {}

// UnsafeDistributionAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionAdminServer will
// result in compilation errors.
type UnsafeDistributionAdminServer interface {
	mustEmbedUnimplementedDistributionAdminServer()
}

func RegisterDistributionAdminServer(s grpc.ServiceRegistrar, srv DistributionAdminServer) {
	s.RegisterService(&DistributionAdmin_ServiceDesc, srv)
}

func _DistributionAdmin_SplitRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionAdminServer).SplitRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionAdmin_SplitRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionAdminServer).SplitRange(ctx, req.(*SplitRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionAdmin_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionAdminServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributionAdmin_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionAdminServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributionAdmin_ServiceDesc is the grpc.ServiceDesc for DistributionAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributionAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DistributionAdmin",
	HandlerType: (*DistributionAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SplitRange",
			Handler:    _DistributionAdmin_SplitRange_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _DistributionAdmin_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distribution.proto",
}
